{"version":3,"sources":["words.ts"],"names":[],"mappings":";AAiHa,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAjHb,MAAM,EAAI,OACJ,EAAU,CACf,GACA,MACA,MACA,QACA,OACA,OACA,MACA,QACA,QACA,OACA,MACA,SACA,SACA,WACA,WACA,UACA,UACA,YACA,WACA,WACA,UAEK,EAAc,CACnB,GACA,MACA,SACA,SACA,QACA,QACA,QACA,UACA,SACA,UAEK,EAAM,CAAC,UAAW,YAClB,EAAS,CACd,IACA,IACA,KACA,QACA,QACA,OACA,OACA,MACA,MACA,MACA,QACA,SACA,SACA,cACA,aACA,QACA,YACA,UACA,YAEK,EAAkB,CACvB,GACA,KACA,MACA,OACA,WACA,UACA,MACA,SACA,OACA,SAEK,EAAU,CACf,SACA,UACA,aACA,cACA,WACA,aACA,WACA,WACA,OACA,WACA,cACA,eACA,kBACA,mBACA,gBACA,kBACA,gBACA,iBAEK,EAAY,CACjB,GACA,OACA,UACA,WACA,cACA,eACA,YACA,cACA,YACA,aAEK,EAAU,CACf,SACA,UACA,cACA,WACA,UACA,aACA,YACA,WAEK,EAAK,CAAC,EAAa,QAAkB,EAAI,WAAW,SAAS,EAAM,GAAG,WAAY,IAAI,MAAM,EAAG,KACxF,QAAA,QAAW,CAAA,IAEnB,GAAA,EAAM,IAAM,OAAO,EAAI,WACvB,GAAA,EAAM,IAAS,UAAW,OAAO,GAAO,KAAM,QAAQ,cACrD,IAAA,MAAO,EAAO,KAAS,EAAO,UAAW,CACvC,MAAA,EAAI,EAAE,OAAS,EAAE,GAAS,EAAE,IAAM,EAAE,IACtC,GAAA,EAAM,EAAI,EAAE,KAAO,SAAU,EAAM,IAAI,EAAG,EAAK,MAAM,UAErD,IAAA,MAAO,EAAO,KAAM,EAAQ,UAC3B,IAAA,MAAO,EAAG,KAAM,EAAgB,UAAW,CACzC,MAAA,EAAI,EAAE,OAAS,EAAU,GAAR,EAAa,GAAK,EAAE,KAAO,EAAE,IAChD,GAAA,EAAM,EAAI,EAAE,KAAO,SAAU,EAAM,IAAI,EAAG,EAAK,MAAM,IAAI,UAG1D,IAAA,MAAO,EAAO,KAAM,EAAQ,UAC3B,IAAA,MAAO,EAAG,KAAM,EAAU,UACzB,IAAA,MAAO,EAAG,KAAM,EAAgB,UAAW,CACzC,MAAA,EAAI,EAAE,OAAS,EAAU,IAAR,EAAkB,GAAJ,EAAS,GAAK,EAAE,MAAQ,EAAE,IAC3D,GAAA,EAAM,EAAI,EAAE,KAAO,SAAU,EAAM,IAAI,EAAG,EAAK,MAAM,IAAI,IAAI,UAIhE,GAAA,EAAM,EAAE,KAAK,EAAE,MAAO,SAAU,EAAM,EAAE,KAAK,EAAE,mBAC7C,MAAA,EAAM,QAAA,QAAQ,EAAE,MAAQ,EAAE,EAAI,WAAW,OAAS,GAAK,EAAE,OACzD,EAAK,EAAI,YAAY,KACpB,SAAG,EAAI,UAAU,EAAG,WAAY,EAAI,UAAU,EAAK","file":"words.0ce6a27b.js","sourceRoot":"..\\src","sourcesContent":["const f = BigInt;\r\nconst under20 = [\r\n\t\"\",\r\n\t\"one\",\r\n\t\"two\",\r\n\t\"three\",\r\n\t\"four\",\r\n\t\"five\",\r\n\t\"six\",\r\n\t\"seven\",\r\n\t\"eight\",\r\n\t\"nine\",\r\n\t\"ten\",\r\n\t\"eleven\",\r\n\t\"twelve\",\r\n\t\"thirteen\",\r\n\t\"fourteen\",\r\n\t\"fifteen\",\r\n\t\"sixteen\",\r\n\t\"seventeen\",\r\n\t\"eighteen\",\r\n\t\"nineteen\",\r\n\t\"twenty\"\r\n];\r\nconst multiples10 = [\r\n\t\"\",\r\n\t\"ten\",\r\n\t\"twenty\",\r\n\t\"thirty\",\r\n\t\"forty\",\r\n\t\"fifty\",\r\n\t\"sixty\",\r\n\t\"seventy\",\r\n\t\"eighty\",\r\n\t\"ninety\"\r\n];\r\nconst low = [\"hundred\", \"thousand\"];\r\nconst higher = [\r\n\t\"m\",\r\n\t\"b\",\r\n\t\"tr\",\r\n\t\"quadr\",\r\n\t\"quint\",\r\n\t\"sext\",\r\n\t\"sept\",\r\n\t\"oct\",\r\n\t\"non\",\r\n\t\"dec\",\r\n\t\"undec\",\r\n\t\"duodec\",\r\n\t\"tredec\",\r\n\t\"quattuordec\",\r\n\t\"quinquadec\",\r\n\t\"sedec\",\r\n\t\"septendec\",\r\n\t\"octodec\",\r\n\t\"novendec\"\r\n];\r\nconst highestPrefixes = [\r\n\t\"\",\r\n\t\"un\",\r\n\t\"duo\",\r\n\t\"tres\",\r\n\t\"quattuor\",\r\n\t\"quinqua\",\r\n\t\"ses\",\r\n\t\"septem\",\r\n\t\"octo\",\r\n\t\"novem\"\r\n];\r\nconst vigints = [\r\n\t\"vigint\",\r\n\t\"trigint\",\r\n\t\"quadragint\",\r\n\t\"quinquagint\",\r\n\t\"sexagint\",\r\n\t\"septuagint\",\r\n\t\"octogint\",\r\n\t\"nonagint\",\r\n\t\"cent\",\r\n\t\"decicent\",\r\n\t\"viginticent\",\r\n\t\"trigintacent\",\r\n\t\"quadragintacent\",\r\n\t\"quinquagintacent\",\r\n\t\"sexagintacent\",\r\n\t\"septuagintacent\",\r\n\t\"octogintacent\",\r\n\t\"nonagintacent\"\r\n];\r\nconst bigPrefix = [\r\n\t\"\",\r\n\t\"deci\",\r\n\t\"viginti\",\r\n\t\"triginta\",\r\n\t\"quadraginta\",\r\n\t\"quinquaginta\",\r\n\t\"sexaginta\",\r\n\t\"septuaginta\",\r\n\t\"octoginta\",\r\n\t\"nonaginta\"\r\n];\r\nconst bigbois = [\r\n\t\"ducent\",\r\n\t\"trecent\",\r\n\t\"quadringent\",\r\n\t\"quingent\",\r\n\t\"sescent\",\r\n\t\"septingent\",\r\n\t\"octingent\",\r\n\t\"nongent\"\r\n];\r\nconst nm = (num: bigint, m: bigint) => `.${num.toString().replace((num / m).toString(), \"\").slice(0, 3)}`\r\nexport const toWords = (num: bigint): string => {\r\n\t// if (num <= 20) return under20[Number(num)];\r\n\tif (num < 1000) return num.toString();\r\n\tif (num < 1000000) return `${(Number(num) / 1000).toFixed(3)} thousand`;\r\n\tfor (const [index, high] of higher.entries()) {\r\n\t\tconst m = f(10) ** ((f(index) + f(2)) * f(3));\r\n\t\tif (num < m * f(1000)) return `${num / m}${nm(num, m)} ${high}illion`;\r\n\t}\r\n\tfor (const [index, h] of vigints.entries()) {\r\n\t\tfor (const [i, p] of highestPrefixes.entries()) {\r\n\t\t\tconst m = f(10) ** ((f(index * 10 + i) + f(21)) * f(3));\r\n\t\t\tif (num < m * f(1000)) return `${num / m}${nm(num, m)} ${p}${h}illion`;\r\n\t\t}\r\n\t}\r\n\tfor (const [index, h] of bigbois.entries()) {\r\n\t\tfor (const [i, p] of bigPrefix.entries()) {\r\n\t\t\tfor (const [j, s] of highestPrefixes.entries()) {\r\n\t\t\t\tconst m = f(10) ** ((f(index * 100 + i * 10 + j) + f(201)) * f(3));\r\n\t\t\t\tif (num < m * f(1000)) return `${num / m}${nm(num, m)} ${s}${p}${h}illion`;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tif (num < f(10)**f(3006)) return `${num / f(10)**f(3003)} millillion`;\r\n\tconst str = toWords(f(10) ** (f(num.toString().length - 1) - f(3000)));\r\n\tconst li = str.lastIndexOf(\" \");\r\n\treturn `${str.substring(0, li)} milli${str.substring(li + 1)}`\r\n\treturn `1e+${num.toString().length - 1}`;\r\n};\r\n"]}